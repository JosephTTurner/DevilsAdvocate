PFLower = tolower(PolitifactBadSources$`Site name`)
OpenSources$X1 = OSLower
PolitifactBadSources = PFLower
library(readr)
PolitifactBadSources <- read_csv("C:/workspace/DevilsAdvocate/DataAnalysis/data.csv")
View(PolitifactBadSources)
OpenSources$X1 = tolower(OpenSources$X1)
PolitifactBadSources$`Site name` = tolower(PolitifactBadSources$`Site name`)
library(dplyr)
OpenSources %>% arrange(OpenSources$X1)
PolitifactBadSources %>%arrange(PolitifactBadSources$`Site name`)
OpenSources %>% arrange(,OpenSources$X1)
PolitifactBadSources %>%arrange(,PolitifactBadSources$`Site name`)
install.packages("dplyr")
install.packages("dplyr")
library("dplyr")
OpenSources %>% arrange(,OpenSources$X1)
OpenSources %>% arrange(OpenSources$X1)
PolitifactBadSources %>%arrange(,PolitifactBadSources$`Site name`)
PolitifactBadSources %>%arrange(PolitifactBadSources$`Site name`)
OpenSources[order(OpenSources$X1), , drop = FALSE]
PolitifactBadSources[oder(PolitifactBadSources$`Site name`), , drop = FALSE]
PolitifactBadSources[order(PolitifactBadSources$`Site name`), , drop = FALSE]
OpenSources = OpenSources[order(OpenSources$X1), , drop = FALSE]
PolitifactBadSources = PolitifactBadSources[order(PolitifactBadSources$`Site name`), , drop = FALSE]
compiledList = rbind(OpenSources, PolitifactBadSources)
m = matrix((833+199), 9)
compiledList = data.fram(m)
compiledList = data.frame(m)
View(compiledList)
compiledList = as.data.frame(m)
View(m)
m = matrix(nrows = (833+199), ncol = 9)
m = matrix(nrow = (833+199), ncol = 9)
compiledList = as.data.frame(m)
library(readr)
compiledList <- read_csv("C:/workspace/DevilsAdvocate/DataAnalysis/compiledList.csv")
View(compiledList)
View(compiledList)
library(readr)
compiledList <- read_csv("C:/workspace/DevilsAdvocate/DataAnalysis/compiledList.csv")
View(compiledList)
compressedList = data.frame(matrix(nrow=(1000), ncol = 6))
c = 1
for (row in 1:nrow(compiledList)){
if(compiledList[row,1] == compliledList[row+1,1]){
compressedList[c,] = merge(compiledList[row,], compiledList[row + 1,])
c = c + 1
}
else if (compiledList[row,1] == compliledList[row - 1,1]){
}
else{
compressedList[c,] = compressedList[row,]
row = row + 1
}
}
for (row in 1:nrow(compiledList)){
if(compiledList[row,1] == compliledList[row+1,1]){
compressedList[c,] = merge(compiledList[row,], compiledList[row + 1,])
c = c + 1
}
else if (compiledList[row,1] == compiledList[row - 1,1]){
}
else{
compressedList[c,] = compressedList[row,]
row = row + 1
}
}
for (row in 1:nrow(compiledList)){
if(compiledList[row,1] == compiledList[row+1,1]){
compressedList[c,] = merge(compiledList[row,], compiledList[row + 1,])
c = c + 1
}
else if (compiledList[row,1] == compiledList[row - 1,1]){
}
else{
compressedList[c,] = compressedList[row,]
row = row + 1
}
}
for (row in 1:nrow(compiledList)){
if(row < nrow(compiledList) &
compiledList[row,1] == compiledList[row+1,1]){
compressedList[c,] = merge(compiledList[row,], compiledList[row + 1,])
c = c + 1
}
else if (compiledList[row,1] == compiledList[row - 1,1]){
}
else{
compressedList[c,] = compressedList[row,]
row = row + 1
}
}
compressedList = data.frame(matrix(nrow=(1000), ncol = 6))
c = 1
for (row in 1:nrow(compiledList)){
if(row < nrow(compiledList) &
compiledList[row,1] == compiledList[row+1,1]){
compressedList[c,] = merge(compiledList[row,], compiledList[row + 1,])
c = c + 1
}
else if (compiledList[row,1] == compiledList[row - 1,1]){
}
else{
compressedList[c,] = compiledList[row,]
row = row + 1
}
}
for (row in 1:nrow(compiledList)){
if(row < nrow(compiledList) &
compiledList[row,1] == compiledList[row+1,1]){
compressedList[c,] = merge(compiledList[row,], compiledList[row + 1,])
c = c + 1
}
else if (row > 1 &
compiledList[row,1] == compiledList[row - 1,1]){
}
else{
compressedList[c,] = compiledList[row,]
row = row + 1
}
}
compressedList[c,] = merge(compiledList[row,], compiledList[row + 1,])
View(compressedList)
View(compiledList)
View(biaseSources)
compiledList[8]
compiledList[8,]
compiledList[8,1]
compiledList[9,1]
compiledList[8,1] == compiledList[9,1]
r = 9
compiledList[r,1] == compiledList[r-1,1]
r = 1
compiledList[r,1] == compiledList[r-1,1]
c = 1
for (row in 1:nrow(compiledList)){
if(row < nrow(compiledList) &
compiledList[row,1] == compiledList[row+1,1]){
compressedList[c,] = merge(compiledList[row,], compiledList[row + 1,])
c = c + 1
}
else if (row > 1)
if (compiledList[row,1] == compiledList[row - 1,1]){
}
else{
compressedList[c,] = compiledList[row,]
row = row + 1
}
}
compressedList[c,] = merge(compiledList[row,], compiledList[row + 1,])
for (row in 1:nrow(compiledList)){
if(row < nrow(compiledList)){
if (compiledList[row,1] == compiledList[row+1,1]){
compressedList[c,] = merge(compiledList[row,], compiledList[row + 1,])
c = c + 1
}
}
else if (row > 1)
if (compiledList[row,1] == compiledList[row - 1,1]){
}
else{
compressedList[c,] = compiledList[row,]
row = row + 1
}
}
for (row in 1:nrow(compiledList)){
if(row < nrow(compiledList)){
if (compiledList[row,1] == compiledList[row+1,1]){
compressedList[c,] = merge(compiledList[row,], compiledList[row + 1,])
c = c + 1
}
}
else if (row > 1)
if (compiledList[row,1] == compiledList[row - 1,1]){
}
else{
compressedList[c,] = compiledList[row,]
row = row + 1
}
}
for (row in 1:nrow(compiledList)){
if(row < nrow(compiledList)){
if (compiledList[row,1] == compiledList[row+1,1]){
compressedList[c,] = merge(compiledList[row,], compiledList[row + 1,])
c = c + 1
}
}
else if (row > 1)
if (compiledList[row,1] == compiledList[row - 1,1]){
}
else{
compressedList[c,] = compiledList[row,]
c = c + 1
}
}
merge(compiledList[r,], compiledList[r + 1,])
compiledList[r,]
compiledList[r + 1,]
for (row in 1:nrow(compiledList)){
if(row < nrow(compiledList)){
if (compiledList[row,1] == compiledList[row+1,1]){
compressedList[c,] = c(compiledList[row,1:4], compiledList[row + 1,5:6])
c = c + 1
}
}
else if (row > 1)
if (compiledList[row,1] == compiledList[row - 1,1]){
}
else{
compressedList[c,] = compiledList[row,]
c = c + 1
}
}
View(compressedList)
for (row in 1:nrow(compiledList)){
if(row < nrow(compiledList)){
if (compiledList[row,1] == compiledList[row+1,1]){
compressedList[c,] = c(compiledList[row + 1,1:4], compiledList[row,5:6])
c = c + 1
}
}
else if (row > 1)
if (compiledList[row,1] == compiledList[row - 1,1]){
}
else{
compressedList[c,] = compiledList[row,]
c = c + 1
}
}
c(compiledList[r+1,1:4], compiledList[r,5:6])
r = 8
c(compiledList[r+1,1:4], compiledList[r,5:6])
compiledList[row,1] == compiledList[row+1,1]
compiledList[r,1] == compiledList[r+1,1]
r = r+1
compiledList[r,1] == compiledList[r+1,1]
r = r+1
compiledList[r,1] == compiledList[r+1,1]
r = r+1
compiledList[r,1] == compiledList[r+1,1]
r = r+1
compiledList[r,1] == compiledList[r+1,1]
r = r+1
compiledList[r,1] == compiledList[r+1,1]
r = r+1
compiledList[r,1] == compiledList[r+1,1]
r = r+1
compiledList[r,1] == compiledList[r+1,1]
r = r+1
compiledList[r,1] == compiledList[r+1,1]
r = r+1
compiledList[r,1] == compiledList[r+1,1]
r
r = 14
compiledList[r,1] == compiledList[r+1,1]
r = 15
compiledList[r,1] == compiledList[r+1,1]
c(compiledList[r+1,1:4], compiledList[r,5:6])
for (row in 1:nrow(compiledList)){
if(row < nrow(compiledList)){
if (compiledList[row,1] == compiledList[row+1,1]){
compressedList[c,] = c(compiledList[row+1,1:4], compiledList[row,5:6])
c = c + 1
}
}
else if (row > 1)
if (compiledList[row,1] == compiledList[row - 1,1]){
}
else{
compressedList[c,] = compiledList[row,]
c = c + 1
}
}
View(compressedList)
for (row in 1:nrow(compiledList)){
if(row < nrow(compiledList)){
if (compiledList[row,1] == compiledList[row+1,1]){
compressedList[c,] = c(compiledList[row,1:4], compiledList[row+1,5:6])
c = c + 1
}
}
else if (row > 1)
if (compiledList[row,1] == compiledList[row - 1,1]){
}
else{
compressedList[c,] = compiledList[row,]
c = c + 1
}
}
View(compiledList)
compiledList=compiledList[sort(compiledList[1,])]
compiledList=sort(compiledList[1,])
compiledList=compiledList[order(compiledList[1,])]
compiledList=compiledList[order(compiledList$site_name)]
compiledList=compiledList[order(compiledList$site_name),]
compressedList = data.frame(matrix(nrow=(1000), ncol = 6))
c = 1
for (row in 1:nrow(compiledList)){
if(row < nrow(compiledList)){
if (compiledList[row,1] == compiledList[row+1,1]){
compressedList[c,] = c(compiledList[row,1:4], compiledList[row+1,5:6])
c = c + 1
}
}
else if (row > 1)
if (compiledList[row,1] == compiledList[row - 1,1]){
}
else{
compressedList[c,] = compiledList[row,]
c = c + 1
}
}
if(row < nrow(compiledList)){
if (compiledList[row,1] == compiledList[row+1,1]){
compressedList[c,] = c(compiledList[row+1,1:4], compiledList[row,5:6])
c = c + 1
}
}
compressedList[c,] = c(compiledList[row+1,1:4], compiledList[row,5:6])
c = 8
compressedList[c,] = c(compiledList[row+1,1:4], compiledList[row,5:6])
for (row in 1:nrow(compiledList)){
if(row < nrow(compiledList)){
if (compiledList[row,1] == compiledList[row+1,1]){
compressedList[c,] = c(compiledList[row+1,1:4], compiledList[row,5:6])
c = c + 1
}
}
else if (row > 1)
if (compiledList[row,1] == compiledList[row - 1,1]){
}
else{
compressedList[c,] = compiledList[row,]
c = c + 1
}
}
c = 1
for (row in 1:nrow(compiledList)){
if(row < nrow(compiledList)){
if (compiledList[row,1] == compiledList[row+1,1]){
compressedList[c,] = c(compiledList[row+1,1:4], compiledList[row,5:6])
c = c + 1
}
}
else if (row > 1)
if (compiledList[row,1] == compiledList[row - 1,1]){
}
else{
compressedList[c,] = compiledList[row,]
c = c + 1
}
}
colnames(compressedList) = colnames(compiledList)
for (row in 1:nrow(compiledList)){
if(row < nrow(compiledList)){
if (compiledList[row,1] == compiledList[row+1,1]){
compressedList[c,] = c(compiledList[row+1,1:4], compiledList[row,5:6])
c = c + 1
}
}
else if (row > 1){
if (compiledList[row,1] == compiledList[row - 1,1]){
}
}
else{
compressedList[c,] = compiledList[row,]
c = c + 1
}
}
View(compressedList)
View(compressedList)
compiledList=compiledList[order(compiledList$site_name),]
compressedList = data.frame(matrix(nrow=(1000), ncol = 6))
c = 1
for (row in 1:nrow(compiledList)){
if(row < nrow(compiledList)){
if (compiledList[row,1] == compiledList[row+1,1]){
compressedList[c,] = c(compiledList[row+1,1:4], compiledList[row,5:6])
c = c + 1
}
}
else if (row > 1){
if (compiledList[row,1] == compiledList[row - 1,1]){
}
}
else{
compressedList[c,] = compiledList[row,]
c = c + 1
}
}
compiledList=compiledList[order(compiledList$site_name),]
compressedList = data.frame(matrix(nrow=(1000), ncol = 6))
c = 1
for (row in 1:nrow(compiledList)){
if(row < nrow(compiledList)){
if (compiledList[row,1] == compiledList[row+1,1]){
compressedList[c,] = c(compiledList[row+1,1:4], compiledList[row,5:6])
c = c + 1
}
else if (row > 1){
if (compiledList[row,1] == compiledList[row - 1,1]){
}
}
else{
compressedList[c,] = compiledList[row,]
c = c + 1
}
}
}
compiledList=compiledList[order(compiledList$site_name),]
compressedList = data.frame(matrix(nrow=(1000), ncol = 6))
c = 1
for (row in 1:nrow(compiledList)){
if(row < nrow(compiledList)){
if (compiledList[row,1] == compiledList[row+1,1]){
compressedList[c,] = c(compiledList[row+1,1:4], compiledList[row,5:6])
c = c + 1
}
else if (row > 1){
if (compiledList[row,1] == compiledList[row - 1,1]){
}
else{
compressedList[c,] = compiledList[row,]
c = c + 1
}
}
else{
compressedList[c,] = compiledList[row,]
c = c + 1
}
}
}
compressedList = data.frame(matrix(nrow=(1000), ncol = 6))
c = 1
for (row in 1:nrow(compiledList)){
if(row < nrow(compiledList)){
if (compiledList[row,1] == compiledList[row+1,1]){
compressedList[c,] = c(compiledList[row+1,1:4], compiledList[row,5:6])
c = c + 1
}
else if (row > 1){
if (compiledList[row,1] == compiledList[row - 1,1]){
}
else{
compressedList[c,] = compiledList[row,]
c = c + 1
}
}
else{
compressedList[c,] = compiledList[row,]
c = c + 1
}
}
else{
if (compiledList[row,1] == compiledList[row - 1,1]){
}
else{
compressedList[c,] = compiledList[row,]
c = c + 1
}
}
}
write.csv(x = compressedList, file = "BadSources.csv")
compressedList = data.frame(matrix(nrow=(877), ncol = 6))
c = 1
for (row in 1:nrow(compiledList)){
if(row < nrow(compiledList)){
if (compiledList[row,1] == compiledList[row+1,1]){
compressedList[c,] = c(compiledList[row+1,1:4], compiledList[row,5:6])
c = c + 1
}
else if (row > 1){
if (compiledList[row,1] == compiledList[row - 1,1]){
}
else{
compressedList[c,] = compiledList[row,]
c = c + 1
}
}
else{
compressedList[c,] = compiledList[row,]
c = c + 1
}
}
else{
if (compiledList[row,1] == compiledList[row - 1,1]){
}
else{
compressedList[c,] = compiledList[row,]
c = c + 1
}
}
}
colnames(compressedList) = colnames(compiledList)
write.csv(x = compressedList, file = "BadSources.csv")
write.csv(x = compressedList, file = "BadSources.csv", row.names = FALSE, quote = FALSE, sep = ",")
write.csv(x = compressedList, file = "BadSources.csv", row.names = FALSE, quote = FALSE, sep = ",", na = "")
install.packages("json")
install.packages("JSON")
install.packages("rjosn")
install.packages("rjson")
library("rjson")
install.packages("rjsonlite")
install.packages("jsonlite")
library("jsonlite")
BadSources <- toJSON(compressedList)
cat(BadSources)
write_json(BadSources, path = "BadSources.json")
write.csv(x = compressedList, file = "BadSources.csv", row.names = FALSE, quote = FALSE, sep = ",", na = "")
write.csv(x = compressedList, file = "BadSources.csv", row.names = FALSE, quote = TRUE, na = "")
write.csv(x = compressedList, file = "BadSources.csv", row.names = FALSE, quote = FALSE, na = "")
